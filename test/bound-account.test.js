// test generated by ChatGPT 4 <:-o

const {expect} = require("chai");
const DeployUtils = require("../scripts/lib/DeployUtils");

describe.only("Bound-account Integration", function () {
  let registry, proxy, implementation, wallet;
  let particle;
  let deployUtils = new DeployUtils(ethers);

  let owner, bob, alice, fred;
  let chainId;

  before(async function () {
    [owner, bob, alice, fred] = await ethers.getSigners();
    chainId = await deployUtils.currentChainId();
  });

  beforeEach(async function () {
    registry = await deployUtils.deploy("ERC6551Registry");
    implementation = await deployUtils.deploy("ERC6551AccountUpgradeable");
    proxy = await deployUtils.deploy("ERC6551AccountProxy", implementation.address);
    particle = await deployUtils.deploy("Particle", "https://particle.xyz/meta/");

    await particle.safeMint(bob.address, 1);
    await particle.safeMint(alice.address, 2);
    await particle.safeMint(fred.address, 3);
  });

  it("Deploy bound account and ", async function () {
    const salt = 100990033007;

    const predictedAccount = await registry.account(proxy.address, chainId, particle.address, 1, salt);

    await registry.createAccount(proxy.address, chainId, particle.address, 1, salt, []);

    wallet = await deployUtils.attach("ERC6551AccountUpgradeable", predictedAccount);

    await expect(particle.connect(fred)["safeTransferFrom(address,address,uint256)"](fred.address, predictedAccount, 3))
      .to.emit(particle, "Transfer")
      .withArgs(fred.address, predictedAccount, 3);

    [cId, tokenAddress, tokenId] = await wallet.token();
    expect(cId).to.equal(chainId);
    expect(tokenAddress).to.equal(particle.address);
    expect(tokenId).to.equal(1);

    expect(await particle.balanceOf(wallet.address)).to.equal(1);

    // IERC6551Account(payable(account4)).executeCall(
    //     address(account3),
    //     0,
    //     abi.encodeWithSignature(
    //         "executeCall(address,uint256,bytes)",
    //         address(nft),
    //         0,
    //         abi.encodeWithSignature(
    //             "safeTransferFrom(address,address,uint256)",
    //             account3,
    //             newTokenOwner,
    //             200
    //         )
    //     )
    // );
  });
});
