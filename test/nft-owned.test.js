// test generated by ChatGPT 4 <:-o

const {expect} = require("chai");

describe("MyOwnedContract and MyToken Integration", function () {
  let MyToken, MyOwnedContract, myToken, myOwnedContract, owner, addr1, addr2, tokenId1, tokenId2;

  beforeEach(async function () {
    MyToken = await ethers.getContractFactory("MyOwningToken");
    MyOwnedContract = await ethers.getContractFactory("MyOwnedContract");

    [owner, addr1, addr2] = await ethers.getSigners();

    myToken = await MyToken.deploy();
    await myToken.deployed();

    myOwnedContract = await MyOwnedContract.deploy(myToken.address);
    await myOwnedContract.deployed();
    expect(await myOwnedContract.getINFTOwnedInterfaceId()).to.equal("0x920c8b9e");

    tokenId1 = 1;
    tokenId2 = 2;
  });

  it("Deploys contracts, mints tokens and checks ownership", async function () {
    // Mint tokens to addr1 and addr2
    await myToken.connect(owner).safeMint(addr1.address, tokenId1);
    await myToken.connect(owner).safeMint(addr2.address, tokenId2);

    expect(await myToken.ownerOf(tokenId1)).to.equal(addr1.address);
    expect(await myToken.ownerOf(tokenId2)).to.equal(addr2.address);
  });

  it("Calls 'init' and 'addSomeAmount' successfully when the caller is the owner of the token", async function () {
    // Mint tokens to addr1 and addr2
    await myToken.connect(owner).safeMint(addr1.address, tokenId1);
    await myToken.connect(owner).safeMint(addr2.address, tokenId2);

    // Initialize the contract
    await myOwnedContract.connect(addr1).init(tokenId1);

    // Add some amount
    const amount = 100;
    await myOwnedContract.connect(addr1).addSomeAmount(tokenId1, amount);

    expect(await myOwnedContract.amounts(tokenId1)).to.equal(amount);
  });

  it("Throws an error when a non-owner tries to call 'init' or 'addSomeAmount'", async function () {
    // Mint tokens to addr1 and addr2
    await myToken.connect(owner).safeMint(addr1.address, tokenId1);
    await myToken.connect(owner).safeMint(addr2.address, tokenId2);

    // Attempt to call 'init' by addr2 (not the owner)
    await expect(myOwnedContract.connect(addr2).init(tokenId1)).to.be.revertedWith("Unauthorized()");

    await myOwnedContract.connect(addr1).init(tokenId1);
    // Attempt to call 'addSomeAmount' by addr2 (not the owner)
    await expect(myOwnedContract.connect(addr2).addSomeAmount(tokenId1, 50)).to.be.revertedWith("Unauthorized()");
  });
});
